#Katherine Van Kirk
#kvankirk@g.harvard.edu

import numpy as np
import matplotlib.pyplot as plt
import copy
import math
from math import e
import random 
import ast
import time
import jax
from neural_tangents import stax
from sklearn.ensemble import RandomForestRegressor
import seaborn as sns
import copy

# Kernel PCA from sklearn
from sklearn.decomposition import PCA

# Plotting tools
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
sns.set_style("ticks")


L = 10
PATCHES = (2*L**2)-(2*L)
DEPTH = 5
NSTATES = 100


def main():
	
	depthkernels = []
	for dep in range(DEPTH):
	    # Read in the expectation value data for all states
	    stateexpvals = []
	    for stateind in range(NSTATES):
	        with open('saveallexpvals_threesite_{}_{}.npy'.format(dep,stateind), 'rb') as f:
	            singlestateexpvals = np.load(f)
	        stateexpvals.append(singlestateexpvals) #singlestateexpvals[0]
	#     print(stateexpvals)
	    with open('expvals_threesite_{}.npy'.format(dep), 'wb') as f:
	        np.save(f, np.array(stateexpvals))


if __name__ == "__main__":
    start = time.time()
    main()
    elapsed = time.time() - start 
    print(f"Elapsed time {elapsed/60:.2f} min")


# DESCRIPTION: This code takes in the shadow data generated by globalsu2shadowtomography.py and aggregates it into numpy arrays for each circuit depth. 

	# saveallexpvals_d_s.npy indices map:
	#    saveallexpvals[0] -- list of patchdata in state (only one index cause only one state per .npy file)
	#    saveallexpvals[0][0] -- for the first patch (ind 0), list of vis space expectation values
